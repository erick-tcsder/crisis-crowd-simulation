import { useStreamingVuln } from "../hooks/simulationStream"
import {useRef,useEffect,useCallback,useState} from 'react'
import { useSearchParams } from "react-router-dom"
import { SimulationService } from "../hooks/simulationservice"
import {PageTitle} from '../components/pageTitle'
import {MapCanvas} from '../components/mapCanvas'


const EventFactory = {
  "START": (event,setPositions)=>{
    return <div className="w-full bg-[#232639] p-3 py-5 rounded-md shadow-md border-t-[#2a2e43] border-b-[border-r-[#2a2e43]]">
      <h4 className="font-bold text-xl">{event.message} <span className="text-xs pl-3 bg-lime-700 bg-opacity-30 text-lime-300 uppercase rounded-sm px-2 py-1">start</span></h4>
    </div>
  },
  'END': (event,setPositions)=>{
    return <div className="w-full bg-[#232639] p-3 py-5 rounded-md shadow-md border-t-[#2a2e43] border-b-[border-r-[#2a2e43]]">
      <h4 className="font-bold text-xl">{event.message} <span className="text-xs pl-3 bg-red-700 bg-opacity-30 text-red-500 uppercase rounded-sm px-2 py-1">end</span></h4>
    </div>
  },
  'LOG': (event,setPositions)=>{
    return <div className="w-full bg-[#232639] p-3 py-5 rounded-md shadow-md border-t-[#2a2e43] border-b-[border-r-[#2a2e43]]">
      <h4 className="font-bold text-xl">{event.message} <span className="text-xs pl-3 bg-sky-700 bg-opacity-30 text-sky-400 uppercase rounded-sm px-2 py-1">log</span></h4>
    </div>
  },
  "RESULTS": (event,setPositions)=>{
    setPositions(event.data)
    return <div className="w-full bg-[#232639] p-3 py-5 rounded-md shadow-md border-t-[#2a2e43] border-b-[border-r-[#2a2e43]]">
      <h4 className="font-bold text-xl">{event.message} <span className="text-xs pl-3 bg-indigo-700 bg-opacity-30 text-indigo-400 uppercase rounded-sm px-2 py-1">results</span></h4>
    </div>
  }
}


export const VulnerabilityPage = ()=>{
  const [params,] = useSearchParams()
  const [maps,setMaps] = useState([])
  const [loading,setLoading] = useState(false)
  const [positions, setPositions] = useState([])
  const colContainerRef = useRef(null)
  const ulRef = useRef(null)
  const getMaps = useCallback(()=>{
    setLoading(true)
    SimulationService.getMaps().then(maps=>setMaps(maps.data)).finally(()=>setLoading(false))
  },[])
  useEffect(()=>{
    getMaps()
  },[getMaps])
  const {events} = useStreamingVuln(loading,maps,{
    bombRadius: parseFloat(params.get('br')),
    peopleCount: parseInt(params.get('pc'))
  },(newState)=>{
    const stateRefactored = {
      ...newState,
      data: newState.data ? {
        bestPositions: newState.data?.bestPositions.map(b=>({
          ...b,
          radius: parseFloat(params.get('br'))*2,
        }))
      } : undefined
    }
    const node = EventFactory[newState?.['EVENT_TYPE']](stateRefactored,setPositions)
    ulRef.current.appendChild(node)
  })
  return (
    <div className='fixed inset-x-2 overflow-hidden top-16 bottom-2 grid-cols-5 grid gap-5'>
      <PageTitle title={'Vulnerability Test'}/>
      <div className="col-span-1 overflow-y-auto">
        <ul className="flex p-5 flex-col gap-y-3" ref={ulRef}/>
      </div>
      <div className="col-span-4 bg-[#232639] relative rounded-md">
        <div className="absolute inset-5 flex" ref={colContainerRef}>
          <MapCanvas handleChangeMap={()=>{}} map={maps[0]} creating={null}  handleUncreate={()=>{}} containerRef={colContainerRef} haveVulnerabilities={true} vulnerabilitiesPositions={positions}/>
        </div>
      </div>
    </div>
  )
}